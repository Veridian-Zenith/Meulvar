# Lexer for Meulvar

# Token types
enum TokenType {
    INT,
    FLOAT,
    BOOL,
    CHAR,
    STRING,
    IDENTIFIER,
    PLUS,
    MINUS,
    MULTIPLY,
    DIVIDE,
    MODULO,
    EQUAL,
    NOT_EQUAL,
    LESS_THAN,
    GREATER_THAN,
    LESS_EQUAL,
    GREATER_EQUAL,
    AND,
    OR,
    NOT,
    BITWISE_AND,
    BITWISE_OR,
    BITWISE_XOR,
    BITWISE_NOT,
    LEFT_SHIFT,
    RIGHT_SHIFT,
    INCREMENT,
    DECREMENT,
    ASSIGN,
    SEMICOLON,
    COMMA,
    DOT,
    COLON,
    LEFT_PAREN,
    RIGHT_PAREN,
    LEFT_BRACE,
    RIGHT_BRACE,
    LEFT_BRACKET,
    RIGHT_BRACKET
}

# Token structure
struct Token {
    type: TokenType,
    value: String
}

# Lexer function
func lex(input: String) -> [Token] {
    let tokens = []
    let length = input.length()
    let i = 0

    while i < length {
        let char = input[i]

        if char.isWhitespace() {
            i += 1
            continue
        }

        if char.isDigit() {
            let start = i
            while i < length && input[i].isDigit() {
                i += 1
            }
            tokens.append(Token(type: INT, value: input[start:i]))
            continue
        }

        if char.isLetter() {
            let start = i
            while i < length && (input[i].isLetter() || input[i].isDigit()) {
                i += 1
            }
            let value = input[start:i]
            if value == "if" || value == "else" || value == "while" || value == "for" || value == "return" {
                tokens.append(Token(type: KEYWORD, value: value))
            } else {
                tokens.append(Token(type: IDENTIFIER, value: value))
            }
            continue
        }

        if char == '+' {
            if i + 1 < length && input[i + 1] == '+' {
                tokens.append(Token(type: INCREMENT, value: "++"))
                i += 2
            } else {
                tokens.append(Token(type: PLUS, value: "+"))
                i += 1
            }
            continue
        }

        if char == '-' {
            if i + 1 < length && input[i + 1] == '-' {
                tokens.append(Token(type: DECREMENT, value: "--"))
                i += 2
            } else {
                tokens.append(Token(type: MINUS, value: "-"))
                i += 1
            }
            continue
        }

        if char == '*' {
            tokens.append(Token(type: MULTIPLY, value: "*"))
            i += 1
            continue
        }

        if char == '/' {
            tokens.append(Token(type: DIVIDE, value: "/"))
            i += 1
            continue
        }

        if char == '%' {
            tokens.append(Token(type: MODULO, value: "%"))
            i += 1
            continue
        }

        if char == '=' {
            if i + 1 < length && input[i + 1] == '=' {
                tokens.append(Token(type: EQUAL, value: "=="))
                i += 2
            } else {
                tokens.append(Token(type: ASSIGN, value: "="))
                i += 1
            }
            continue
        }

        if char == '!' {
            if i + 1 < length && input[i + 1] == '=' {
                tokens.append(Token(type: NOT_EQUAL, value: "!="))
                i += 2
            } else {
                tokens.append(Token(type: NOT, value: "!"))
                i += 1
            }
            continue
        }

        if char == '<' {
            if i + 1 < length && input[i + 1] == '=' {
                tokens.append(Token(type: LESS_EQUAL, value: "<="))
                i += 2
            } else if i + 1 < length && input[i + 1] == '<' {
                tokens.append(Token(type: LEFT_SHIFT, value: "<<"))
                i += 2
            } else {
                tokens.append(Token(type: LESS_THAN, value: "<"))
                i += 1
            }
            continue
        }

        if char == '>' {
            if i + 1 < length && input[i + 1] == '=' {
                tokens.append(Token(type: GREATER_EQUAL, value: ">="))
                i += 2
            } else if i + 1 < length && input[i + 1] == '>' {
                tokens.append(Token(type: RIGHT_SHIFT, value: ">>"))
                i += 2
            } else {
                tokens.append(Token(type: GREATER_THAN, value: ">"))
                i += 1
            }
            continue
        }

        if char == '&' {
            if i + 1 < length && input[i + 1] == '&' {
                tokens.append(Token(type: AND, value: "&&"))
                i += 2
            } else {
                tokens.append(Token(type: BITWISE_AND, value: "&"))
                i += 1
            }
            continue
        }

        if char == '|' {
            if i + 1 < length && input[i + 1] == '|' {
                tokens.append(Token(type: OR, value: "||"))
                i += 2
            } else {
                tokens.append(Token(type: BITWISE_OR, value: "|"))
                i += 1
            }
            continue
        }

        if char == '^' {
            tokens.append(Token(type: BITWISE_XOR, value: "^"))
            i += 1
            continue
        }

        if char == '~' {
            tokens.append(Token(type: BITWISE_NOT, value: "~"))
            i += 1
            continue
        }

        if char == '(' {
            tokens.append(Token(type: LEFT_PAREN, value: "("))
            i += 1
            continue
        }

        if char == ')' {
            tokens.append(Token(type: RIGHT_PAREN, value: ")"))
            i += 1
            continue
        }

        if char == '{' {
            tokens.append(Token(type: LEFT_BRACE, value: "{"))
            i += 1
            continue
        }

        if char == '}' {
            tokens.append(Token(type: RIGHT_BRACE, value: "}"))
            i += 1
            continue
        }

        if char == '[' {
            tokens.append(Token(type: LEFT_BRACKET, value: "["))
            i += 1
            continue
        }

        if char == ']' {
            tokens.append(Token(type: RIGHT_BRACKET, value: "]"))
            i += 1
            continue
        }

        if char == '"' {
            let start = i
            i += 1
            while i < length && input[i] != '"' {
                i += 1
            }
            tokens.append(Token(type: STRING, value: input[start:i+1]))
            i += 1
            continue
        }

        if char == '\'' {
            let start = i
            i += 1
            while i < length && input[i] != '\'' {
                i += 1
            }
            tokens.append(Token(type: CHAR, value: input[start:i+1]))
            i += 1
            continue
        }

        if char == ';' {
            tokens.append(Token(type: SEMICOLON, value: ";"))
            i += 1
            continue
        }

        if char == ',' {
            tokens.append(Token(type: COMMA, value: ","))
            i += 1
            continue
        }

        if char == '.' {
            tokens.append(Token(type: DOT, value: "."))
            i += 1
            continue
        }

        if char == ':' {
            tokens.append(Token(type: COLON, value: ":"))
            i += 1
            continue
        }
    }

    return tokens
}
